// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sessions.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one

INSERT INTO sessions(user_id, refresh_token, created_at, updated_at, expires_at)
VALUES ($1,$2,$3,$4,$5)
RETURNING session_id, user_id, refresh_token, created_at, updated_at, expires_at
`

type CreateSessionParams struct {
	UserID       uuid.UUID
	RefreshToken string
	CreatedAt    sql.NullTime
	UpdatedAt    sql.NullTime
	ExpiresAt    time.Time
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.UserID,
		arg.RefreshToken,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ExpiresAt,
	)
	var i Session
	err := row.Scan(
		&i.SessionID,
		&i.UserID,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getSessionByUserId = `-- name: GetSessionByUserId :one
SELECT session_id, user_id, refresh_token, created_at, updated_at, expires_at FROM sessions where user_id = $1
`

func (q *Queries) GetSessionByUserId(ctx context.Context, userID uuid.UUID) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSessionByUserId, userID)
	var i Session
	err := row.Scan(
		&i.SessionID,
		&i.UserID,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const updateSession = `-- name: UpdateSession :exec
UPDATE sessions
SET
    refresh_token = 'new_refresh_token',
    expires_at = '2024-12-31 23:59:59',
    updated_at = NOW()
WHERE
    user_id = $1
`

func (q *Queries) UpdateSession(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, updateSession, userID)
	return err
}

const updateSessionByDelete = `-- name: UpdateSessionByDelete :exec

DELETE FROM sessions where user_id = $1
`

func (q *Queries) UpdateSessionByDelete(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, updateSessionByDelete, userID)
	return err
}
