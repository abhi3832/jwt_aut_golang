// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const checkUserAlreadyExits = `-- name: CheckUserAlreadyExits :one
SELECT user_id, first_name, last_name, email, phone, passward, user_type, created_at, updated_at, api_key FROM users WHERE email = $1 or phone = $2
`

type CheckUserAlreadyExitsParams struct {
	Email string
	Phone string
}

func (q *Queries) CheckUserAlreadyExits(ctx context.Context, arg CheckUserAlreadyExitsParams) (User, error) {
	row := q.db.QueryRowContext(ctx, checkUserAlreadyExits, arg.Email, arg.Phone)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.Passward,
		&i.UserType,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApiKey,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one

INSERT INTO users(user_id,first_name,last_name,email,phone,passward,user_type,created_at,updated_at,api_key)
VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,encode(sha256(random()::text::bytea),'hex'))
RETURNING user_id, first_name, last_name, email, phone, passward, user_type, created_at, updated_at, api_key
`

type CreateUserParams struct {
	UserID    uuid.UUID
	FirstName string
	LastName  sql.NullString
	Email     string
	Phone     string
	Passward  string
	UserType  sql.NullString
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.UserID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Phone,
		arg.Passward,
		arg.UserType,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.Passward,
		&i.UserType,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApiKey,
	)
	return i, err
}

const getUserByApiKey = `-- name: GetUserByApiKey :one
SELECT user_id, first_name, last_name, email, phone, passward, user_type, created_at, updated_at, api_key FROM users WHERE api_key = $1
`

func (q *Queries) GetUserByApiKey(ctx context.Context, apiKey string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByApiKey, apiKey)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.Passward,
		&i.UserType,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApiKey,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, first_name, last_name, email, phone, passward, user_type, created_at, updated_at, api_key FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.Passward,
		&i.UserType,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApiKey,
	)
	return i, err
}

const getUserByUserId = `-- name: GetUserByUserId :one
SELECT user_id, first_name, last_name, email, phone, passward, user_type, created_at, updated_at, api_key FROM users WHERE user_id = $1
`

func (q *Queries) GetUserByUserId(ctx context.Context, userID uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUserId, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.Passward,
		&i.UserType,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApiKey,
	)
	return i, err
}
